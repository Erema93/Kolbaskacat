import os
import telebot
import schedule
import time
import threading
from flask import Flask, request
import logging
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "7149701343:AAHj3tT3KFlN5YXUQdTxSbNkDcGPyt3vjjY"
# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π chat_id (—á–∏—Å–ª–æ–≤–æ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä, 123456789 –∏–ª–∏ -100123456789 –¥–ª—è –≥—Ä—É–ø–ø)
CHAT_ID = "7149701343"  # –ü–æ–∫–∞ None, –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ ID

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ Flask
bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# –°–ø–∏—Å–æ–∫ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–∫–∞–∑–æ–∫
TALES = [
    "üê± –û–¥–Ω–∞–∂–¥—ã –∫–æ—Ç-–∫–æ–ª–±–∞—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –≤ –∫–æ–ª–±–∞—Å–Ω—ã–π –ª–µ—Å –∏ –Ω–∞—à–µ–ª –≤–æ–ª—à–µ–±–Ω—É—é —Å–æ—Å–∏—Å–∫—É...",
    "üê± –í –¥–∞–ª–µ–∫–æ–π –∫–æ–ª–±–∞—Å–Ω–æ–π —Å—Ç—Ä–∞–Ω–µ –∫–æ—Ç-–∫–æ–ª–±–∞—Å–∫–∞ –ø–æ–¥—Ä—É–∂–∏–ª—Å—è —Å —Å—ã—Ä–Ω—ã–º –¥—Ä–∞–∫–æ–Ω–æ–º...",
    "üê± –ö–æ—Ç-–∫–æ–ª–±–∞—Å–∫–∞ —Ä–µ—à–∏–ª —É—Å—Ç—Ä–æ–∏—Ç—å –ø–∏—Ä –¥–ª—è –≤—Å–µ—Ö —Å–≤–æ–∏—Ö –º—è—Å–Ω—ã—Ö –¥—Ä—É–∑–µ–π...",
    "üê± –í —Ç–µ–º–Ω–æ–π –∫–æ–ª–±–∞—Å–Ω–æ–π –ø–µ—â–µ—Ä–µ –∫–æ—Ç-–∫–æ–ª–±–∞—Å–∫–∞ –Ω–∞—à–µ–ª —Å–æ–∫—Ä–æ–≤–∏—â–µ –∏–∑ –≤–µ—Ç—á–∏–Ω—ã...",
    "üê± –ö–æ—Ç-–∫–æ–ª–±–∞—Å–∫–∞ –∏–∑–æ–±—Ä–µ–ª –º–∞—à–∏–Ω—É, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç —Ö–ª–µ–± –≤ –∫–æ–ª–±–∞—Å—É..."
]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏
def gen_markup():
    markup = InlineKeyboardMarkup()
    markup.row_width = 1
    markup.add(InlineKeyboardButton("–°–∫–∞–∑–∫–∞", callback_data="tell_tale"))
    return markup

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –∫–Ω–æ–ø–∫–æ–π
@bot.message_handler(commands=['start'])
def send_welcome(message):
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å–∫–∞–∑–∫–∞—Ö, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –∑–∞–¥–∞–Ω
        global CHAT_ID
        if CHAT_ID is None:
            CHAT_ID = message.chat.id
            logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω CHAT_ID: {CHAT_ID}")
        
        bot.send_message(
            message.chat.id,
            "–ü—Ä–∏–≤–µ—Ç! üê± –Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ —Å–ª—É—á–∞–π–Ω—ã–µ —Å–∫–∞–∑–∫–∏ –ø—Ä–æ –∫–æ—Ç–æ–≤-–∫–æ–ª–±–∞—Å–æ–∫ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 22:00! "
            "–ê –µ—â–µ –º–æ–∂–µ—à—å –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É—Å–ª—ã—à–∞—Ç—å —Å–∫–∞–∑–∫—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!",
            reply_markup=gen_markup()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    if call.data == "tell_tale":
        try:
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Å–∫–∞–∑–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞
            tale = random.choice(TALES)
            bot.send_message(call.message.chat.id, tale)
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–Ω–æ–≤–∞
            bot.send_message(call.message.chat.id, "–•–æ—á–µ—à—å –µ—â–µ –æ–¥–Ω—É?", reply_markup=gen_markup())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∫–∞–∑–∫–∏ –ø–æ –∫–Ω–æ–ø–∫–µ: {e}")

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–∫–∞–∑–æ–∫
def send_tales():
    logger.info("–û—Ç–ø—Ä–∞–≤–ª—è—é –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–∫–∞–∑–∫–∏...")
    if CHAT_ID is None:
        logger.error("CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –°–∫–∞–∑–∫–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
        return
    try:
        # –í—ã–±–∏—Ä–∞–µ–º –¥–≤–µ —Å–ª—É—á–∞–π–Ω—ã–µ —Å–∫–∞–∑–∫–∏
        tale1 = random.choice(TALES)
        tale2 = random.choice(TALES)
        bot.send_message(CHAT_ID, tale1)
        time.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        bot.send_message(CHAT_ID, tale2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å–∫–∞–∑–æ–∫: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
def run_scheduler():
    schedule.every().day.at("22:00").do(send_tales)
    while True:
        try:
            schedule.run_pending()
            time.sleep(60)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
            time.sleep(60)

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤ Telegram
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    try:
        if request.headers.get("content-type") == "application/json":
            json_string = request.get_data().decode("utf-8")
            update = telebot.types.Update.de_json(json_string)
            bot.process_new_updates([update])
            return "", 200
        else:
            return "", 403
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –≤–µ–±—Ö—É–∫–µ: {e}")
        return "", 500

# –ì–ª–∞–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
@app.route("/")
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
def set_webhook():
    port = int(os.environ.get("PORT", 10000))
    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ Render –∏–ª–∏ –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–∏—Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–Ω–µ—à–Ω–∏–π URL
    webhook_url = f"https://{os.environ.get('RENDER_EXTERNAL_HOSTNAME', 'your-service.onrender.com')}/{TOKEN}"
    
    try:
        bot.remove_webhook()
        time.sleep(1)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
        bot.set_webhook(url=webhook_url)
        logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}")

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    logger.info(f"Starting app on port {port}")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    set_webhook()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
    scheduler_thread.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä
    app.run(host="0.0.0.0", port=port)

    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ set_webhook() –∏ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –Ω–∏–∂–µ:
    # bot.remove_webhook()
    # bot.polling(none_stop=True)



